[{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"drotr","text":"Optimal treatment rules (OTRs) policies assign treatment based individual’s observed characteristics maximize counterfactual outcome individual patients. OTRs increasing interest fields like healthcare given treatments can varying effects across population subgroups. many ways define OTRs, one estimand commonly used Conditional Average Treatment Effect (CATE). CATE measures expected difference counterfactual outcome different treatments given subset covariates. CATE estimation often relies assumptions , violated, can lead inaccurate results. Additionally, recommending treatment individuals CATE indicating benefit treatment may practical due challenges resource limitations population-level consequences overprescribing. overcome challenges doubly-robust method learning OTRs estimating average treatment effects rules. OTRs constrained assign treatment individuals clinically relevant treatment effect size. use doubly robust (DR)-learner estimate CATE, ensuring accurate estimation least combination nuisance parameters consistently estimated (Kennedy 2023). Super Learner ensemble used optimally combine candidate models treatment rule estimation way minimizes cross-validated risk uncovers treatment effect heterogeneity effectively traditional approaches (Luedtke Laan 2016), (Montoya et al. 2023). Given treatment decisions made OTR, identify following quantities describe outcomes OTR: (1) proportion treated, (2) Average Treatment effect Rule (ATRdATR_d), (3) Average Treatment effect subgroup Recommended Treatment rule (ATRTdATRT_d), (4) Average Treatment effect subgroup Recommended Treatment rule (ATNRTdATNRT_d), (5) difference subgroups. estimate quantities using augmented inverse probability treatment weighted estimator (AIPTW) maintain doubly-robust property line CATE (Kurz 2022). can compare expected outcomes different OTRs identify covariates informative thus focused policymaking. method unbiased 95% confidence interval coverage data-adaptive parameters.","code":""},{"path":[]},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"notation","dir":"Articles","previous_headings":"Methods","what":"Notation","title":"drotr","text":"Let W∈𝒲W \\\\mathcal{W} denote full set covariates data. consider subset covariates ZZ create OTR Z⊆WZ \\subseteq W. Let ∈{0,1}\\\\{0,1\\} binary treatment decision =1A = 1 observation assigned treatment =0A = 0 otherwise. Lastly, let Y∈𝒴Y \\\\mathcal{Y} real-valued outcome variable. denote missingness outcome variable YY using Δ∈{0,1}\\Delta \\\\{0,1\\} Δ=0\\Delta = 0 outcome missing Δ=1\\Delta = 1 outcome observed. observe independent identically distributed (..d) sample observations Oi=(Wi,Ai,Δi,ΔiYi)∼P0∈𝒫O_i = (W_i, A_i,\\Delta_i, \\Delta_iY_i) \\sim P_0 \\\\mathcal{P}, P0P_0 unknown distribution model 𝒫\\mathcal{P}. introduce counterfactual outcome Y(,Δ=1)∼P0,,Δ=1Y(, \\Delta = 1) \\sim P_{0, , \\Delta = 1} every treatment assignment 𝒶∈𝒜\\mathcal{\\}. counterfactual outcome represents outcome observed , perhaps contrary actual assignments, observation assigned treatment 𝒶\\mathcal{} outcomes missing.","code":""},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"parameters-of-interest","dir":"Articles","previous_headings":"Methods","what":"Parameters of Interest","title":"drotr","text":"counterfactual outcomes can used quantify effect treatment subgroups patients ZZ characteristics use Conditional Average Treatment Effect (CATE). define CATE ψ(𝓏)=E[Y(=1,Δ=1)|Z=z]−E[Y(=0,Δ=1)|Z=z]\\mathcal{\\psi(z)} = E[Y(= 1, \\Delta = 1) | Z = z] - E[Y(= 0, \\Delta = 1) | Z = z]. CATE expected difference counterfactual outcome treatment vs placebo subgroup patients covariates ZZ. outcome binary, ψ(Z)\\psi(Z) represents causal risk difference sub-population covariate values Z=zZ=z, outcome continuous, ψ(Z)\\psi(Z) represents causal difference expected outcome subpopulation. Consider decision rule dd assigns treatment indiviuals based specific covariate values. wish consider optimal treatment rule assign treatment individuals benefit none harmed. , use CATE build rule d(Z)=(ψ(Z)<0)d(Z) = (\\psi(Z) < 0) YY undesirable outcome d(Z)=(ψ(Z)>0)d(Z) = (\\psi(Z) > 0) Y desirable outcome. may constrain OTRs recommend treatment individuals CATE reaches magnitude tt: d(Z)={0ψ(Z)<t1otherwise d(Z) = \\begin{cases}   0 & \\psi(Z) < t \\\\   1 & \\mbox{otherwise} \\end{cases}  constraining OTR, able identify subgroups experience greatest benefit OTR, balancing benefits treatment potential resource restrictions limitations.","code":""},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"effect-estimands","dir":"Articles","previous_headings":"Methods","what":"Effect Estimands","title":"drotr","text":"may use various effect estimands quantify impact constrained OTR target population. focus following: Average Treatment effect among Recommended Treatment rule d (ATRTdATRT_d): E[Y(1)−Y(0)|d(Z)=1]E[Y(1) - Y(0) | d(Z) = 1] Average Treatment effect among Recommended Treatment rule d (ATNRTdATNRT_d): E[Y(1)−Y(0)|d(Z)=0]E[Y(1) - Y(0) | d(Z) = 0] Proportion Treated: E[d(Z)=1]E[d(Z) = 1] Average Treatment effect Rule d  (ATRdATR_d): E[Y(1)−Y(0)]E[Y(1) - Y(0)] Difference subgroups (ATRTd−ATRNTdATRT_d - ATRNT_d): E[Y(1)−Y(0)|d(Z)=1]−E[Y(1)−Y(0)|d(Z)=0]E[Y(1) - Y(0) | d(Z) = 1] - E[Y(1) - Y(0) | d(Z) = 0]","code":""},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"estimation","dir":"Articles","previous_headings":"Methods","what":"Estimation","title":"drotr","text":"approach makes use nested cross-validation estimate CATE. partition data KK splits approximately equal size define outer K folds. kthk^{th} partition serves validation sample, remaining K−1K - 1 partitions serve training sample. training samples partitioned VV splits define VV inner folds, vthv^{th} serving validation sample V−1V - 1 serving training sample. fix V=3V = 3 ensure adequate sample size within inner validation folds. nested cross-validation procedure helps minimize risk overfitting estimating CATE. Given training sample, follow Doubly-robust (DR)-Learner approach outlined (Kennedy 2023). Three ‘nuisance’ models used build pseudo-outcome: (1) outcome model μ(,w)=E[Y|Δ=1,=,W=w]\\mu(,w) = E[Y | \\Delta = 1, = , W = w], treatment model π(|w)=P(=|W=w)\\pi(| w) = P(= | W = w), missingness model γ(1|,w)=P(Δ=1|=,W=w)\\gamma(1 | , w) = P(\\Delta = 1 | = , W = w). Super Learner used fit regressions nuisance models. Given nuisance regression estimates, define pseudo-outcome D̂k,v0(Oi)=(2Ai−1)Δiπ̂k,v0(Ai∣Wi){1−γ̂k,v0(1∣Ai,Wi)}{Yi−μ̂k,v0(Ai,Wi)}+{μ̂k,v0(1,Wi)−μ̂k,v0(0,Wi)}. \\hat{D}_{k,v}^0(O_i) = \\frac{(2A_i - 1)\\Delta_i}{\\hat{\\pi}_{k,v}^0(A_i \\mid W_i) \\{ 1 - \\hat{\\gamma}_{k,v}^0(1 \\mid A_i, W_i)\\}} \\{ Y_i - \\hat{\\mu}_{k,v}^0(A_i,W_i)\\} + \\{ \\hat{\\mu}_{k,v}^0(1, W_i) - \\hat{\\mu}_{k,v}^0(0, W_i)\\} \\ .   observation v-th validation sample nested k-th training sample. fit regression pseudo-outcome D̂k,v0(Oi)\\hat{D}_{k,v}^0(O_i) ZZ using data teh vv-th validation sample, denoting regression ψ̂k,v1\\hat{\\psi}_{k,v}^1. process repeats VV inner cross-validation folds, resulting CATE estimates (ψ̂k,v1:v=1,…,V)(\\hat{\\psi}_{k,v}^1: v= 1, \\dots, V) can averaged obtain estimate CATE ψ̂k0=1V∑v=1Vψ̂k,v1\\hat{\\psi}_{k}^0 = \\frac{1}{V}\\sum_{v=1}^V \\hat{\\psi}_{k,v}^1. define optimal treatment rule within kk-th fold d̂k0(Z)={0if ψ̂k0(Z)<t1otherwise. \\hat{d}_{k}^0(Z) = \\left\\{ \\begin{array}{cc}    0 & \\mbox{} \\hat{\\psi}_{k}^0(Z) < t \\\\    1  & \\mbox{otherwise} \\end{array}\\right. \\ . can now use decision rule learned kk-th training sample estimate effect estimands interest. Let us identify following quantities: average outcome treatment given recommendation treatment ’: E[Y()∣d̂k0(Z)=′]E[Y() \\mid \\hat{d}_{k}^0(Z) = '] identified via θk(∣′)=E[E(Y∣=,Δ=0,W)∣d̂k0(Z)=′]\\theta_k(\\mid ') = E[E(Y \\mid = , \\Delta = 0, W) \\mid \\hat{d}_k^0(Z) = '] proportion treated rule: pk=P(dk0̂(Z)=1)p_k = P(\\hat{d_k^0}(Z) = 1) Using notation, θk(1|1)−θk(0|1)\\theta_k(1|1) - \\theta_k(0|1) represents ATRTdATRT_d, θk(1|0)−θk(0|0)\\theta_k(1|0) - \\theta_k(0|0) represents ATNRTdATNRT_d, {θk(1|1)−θk(0|1)}pk\\{\\theta_k(1|1) - \\theta_k(0|1)\\}p_k represents ATRdATR_d. use augmented inverse probability treatment weighted (AIPTW) estimates θk(|′)\\theta_k(|'). forms estimators given . Let ℐk1\\mathcal{}_k^1 denote set containing indices observations kk-th validation sample let nk1n_k^1 denote cardinality ℐk1\\mathcal{}_k^1. estimate pkp_k can use estimate p̂k1=(nk1)−1∑:∈ℐk1I(dk0(Zj)=1)\\hat{p}_k^1 = (n_k^1)^{-1}\\sum_{: \\\\mathcal{}_k^1} (d_k^0(Z_j) = 1). estimate θk(∣′)\\theta_k(\\mid '), define ∈ℐk1i \\\\mathcal{}_k^1, Ti(∣′)=(dk0(Zi)=′)∑j:j∈ℐk1I(dk0(Zj)=′)[(Ai=,Δi=0)π̂k0(∣Wi){1−γ̂k0(1∣,Wi)}{Yi−μ̂k0(,Wi)}+μ̂k0(,Wi)]. \\begin{align*} T_i(\\mid ') &= \\frac{(d_k^0(Z_i) = ')}{\\sum_{j: j \\\\mathcal{}_k^1} (d_k^0(Z_j) = ')} \\left[  \\frac{(A_i = , \\Delta_i = 0)}{\\hat{\\pi}_k^0(\\mid W_i) \\{1 - \\hat{\\gamma}_k^0(1 \\mid , W_i)\\}} \\{ Y_i - \\hat{\\mu}_{k}^0(, W_i)\\} + \\hat{\\mu}^0_k(, W_i) \\right] \\ . \\end{align*}  augmented inverse probability treatment weighted (AIPTW) estimate θk(∣′)\\theta_k(\\mid ') θ̂k1(∣′)=1nk1∑:∈ℐk1Ti(∣′) \\hat{\\theta}_k^1(\\mid ') = \\frac{1}{n_{k}^1}  \\sum_{: \\\\mathcal{}_k^1} T_i(\\mid ')   asymptotic variance n1/2θ̂k1(∣′)n^{1/2} \\hat{\\theta}_k^1(\\mid ') can estimated using σ̂k2=1nk1∑:∈ℐk1{Ti(∣′)−∑j:j∈ℐk1nTj(∣′)}2 \\hat{\\sigma}^2_k = \\frac{1}{n_{k}^1}  \\sum_{: \\\\mathcal{}_k^1} \\left\\{ T_i(\\mid ') - \\sum_{j: j \\\\mathcal{}_k^1}^n T_j(\\mid ') \\right\\}^2 \\   delta method influence functions can used compute estimates asymptotic variance scaled estimates effect parameters. estimate parameters outer cross-validation fold, average across folds obtain overall estimates. flowchart depicting overall estimation procedure can seen figure .","code":""},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage:","title":"drotr","text":"First, load package: following example uses toy data set (abcd_data) comes package. abcd_data simulated dataset based real data AntiBiotics Children severe Diarrhea (ABCD) trial. dataset contains 40 covariates (W) n=6692n = 6692 observations. aim simulate effect azithromycin (=an_grp_01A = \\_grp\\_01), antibiotic commonly used diarrheal pathogens, linear growth 90 days trial enrollment (Y=lazd90Y = lazd90). Approximately 4% outcomes Y missing random. want estimate OTR based subset covariates related host characteristics measured baseline (Z=avemuac,wfazscore,wflzscore,lfazscore,dy1_ant_sex,agemchild,an_ses_quintileZ = avemuac, wfazscore, wflzscore, lfazscore, dy1\\_ant\\_sex, agemchild, \\_ses\\_quintile). test threshold t=0.05t = 0.05 treatment. means patients recommended treatment expected benefit linear growth day 90 trial 0.05 z-score compared receive treatment. Note example, outcome beneficial. CATEs exceeding threshold desirable indicate high benefit treatment. outcome undesirable, want individuals CATEs larger negative magnitude threshold recommended treatment. package automatically adjust setting negative threshold. However, using threshold zero, make sure enter “+0” “-0” character string indicate direction.","code":"library(drotr) data(abcd_data) head(abcd_data) #>   pid an_grp_01 rotavirus_new norovirus_new adenovirus_new astrovirus_new #> 1   1         0             0      0.000000       0.000000              0 #> 2   2         0             0      0.000000       0.000000              0 #> 3   3         0             0      0.000000       0.000000              0 #> 4   4         0             0      4.301341       1.413699              0 #> 5   5         1             0      0.000000       0.000000              0 #> 6   6         1             0      0.000000       4.613438              0 #>   sapovirus_new st_etec_new shigella_new campylobacter_new tepec_new #> 1      5.809444   0.0000000     1.975475         0.9374672  0.000000 #> 2      0.000000   1.0992149     0.000000         0.0000000  3.197217 #> 3      0.000000   1.2516375     0.000000         0.0000000  0.000000 #> 4      0.000000   0.0000000     0.000000         0.0000000  0.000000 #> 5      0.000000   0.2018044     0.000000         3.0005416  0.000000 #> 6      0.000000   0.0000000     0.000000         0.0000000  0.000000 #>   v_cholerae_new salmonella_new cryptosporidium_new rotavirus_bin norovirus_bin #> 1              0              0                   0             0             0 #> 2              0              0                   0             0             0 #> 3              0              0                   0             0             0 #> 4              0              0                   0             0             1 #> 5              0              0                   0             0             0 #> 6              0              0                   0             0             0 #>   adenovirus_bin astrovirus_bin sapovirus_bin st_etec_bin shigella_bin #> 1              0              0             1           0            1 #> 2              0              0             0           1            0 #> 3              0              0             0           1            0 #> 4              1              0             0           0            0 #> 5              0              0             0           1            0 #> 6              1              0             0           0            0 #>   campylobacter_bin tepec_bin v_cholerae_bin salmonella_bin cryptosporidium_bin #> 1                 1         0              0              0                   0 #> 2                 0         1              0              0                   0 #> 3                 0         0              0              0                   0 #> 4                 0         0              0              0                   0 #> 5                 1         0              0              0                   0 #> 6                 0         0              0              0                   0 #>   dy1_scrn_vomitall dy1_scrn_lstools dy1_scrn_sstools dy1_scrn_diardays #> 1               Yes                9                1                 0 #> 2               Yes                7                0                 1 #> 3               Yes                7                0                 5 #> 4               Yes                7                0                 2 #> 5               Yes                1                0                 1 #> 6               Yes                5                0                 2 #>      dy1_scrn_dehydr     site dy1_ant_sex agemchild     an_ses_quintile #> 1   Some dehydration Pakistan      Female  5.801993 4th quintile of SES #> 2   Some dehydration Pakistan      Female 14.681659 5th quintile of SES #> 3 Severe dehydration Tanzania      Female  7.558416 3rd quintile of SES #> 4   Some dehydration   Malawi        Male 13.743810 4th quintile of SES #> 5     No dehydration     Mali      Female  9.848812 3rd quintile of SES #> 6     No dehydration    Kenya        Male  9.799398 1st quintile of SES #>   an_tothhlt5  month_en rotaseason  avemuac  lfazscore  wfazscore  wflzscore #> 1           3      July          0 12.43363  0.9887319 -0.6014197 -0.8977421 #> 2           1      June          1 11.37052 -3.3641961 -3.8697283 -2.2103208 #> 3           2 September          1 13.50581 -0.7048566 -1.6076714 -1.4870581 #> 4           4   January          0 12.63497 -1.9954476 -2.1567078 -0.7570579 #> 5           2   January          1 13.94833 -0.1411175 -0.7486380 -0.8417239 #> 6           3     March          0 14.19664 -1.3049425 -0.6480911  0.5913560 #>        lazd90 #> 1 -0.24423622 #> 2 -3.24702621 #> 3 -0.05373623 #> 4 -2.17004791 #> 5  0.17351546 #> 6 -2.21432910"},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"inputs","dir":"Articles","previous_headings":"Usage:","what":"Inputs","title":"drotr","text":"Let’s set parameters described passed function: Next, need choose libraries interested using fit nuisance models. SuperLearner package comes wrappers common prediction algorithms (see SuperLearner::listWrappers() full list available wrappers). choose several outcome model able capture complex form outcome model. know ABCD trial randomized control trial, SL.mean sufficient estimate 1:1 randomization. Additionally, one may wish write wrappers SuperLearner based biological plausibility. simulated dataset, know data missing random. However, one may hypothesize data missing based variables month site. can specify missingness model using covariates follows: include new wrapper list missingness models Lastly, must specify CATE models sufficiently complex capture true treatment effect.","code":"Y <- \"lazd90\"  A <- \"an_grp_01\"  W <- c(\"rotavirus_new\", \"rotavirus_bin\", \"norovirus_new\", \"norovirus_bin\", \"adenovirus_new\",       \"adenovirus_bin\", \"sapovirus_new\",\"sapovirus_bin\", \"astrovirus_new\", \"astrovirus_bin\",       \"st_etec_new\", \"st_etec_bin\", \"shigella_new\", \"shigella_bin\", \"campylobacter_new\",       \"campylobacter_bin\", \"tepec_new\", \"tepec_bin\", \"v_cholerae_new\", \"v_cholerae_bin\",       \"salmonella_new\", \"salmonella_bin\", \"cryptosporidium_new\", \"cryptosporidium_bin\",       \"dy1_scrn_vomitall\", \"dy1_scrn_lstools\", \"dy1_scrn_sstools\", \"dy1_scrn_diardays\",       \"dy1_scrn_dehydr\", \"avemuac\", \"wfazscore\", \"lfazscore\", \"wflzscore\", \"site\",       \"dy1_ant_sex\", \"agemchild\", \"an_ses_quintile\", \"an_tothhlt5\", \"month_en\", \"rotaseason\")  Z <- c(\"avemuac\", \"wfazscore\", \"wflzscore\", \"lfazscore\", \"dy1_ant_sex\", \"agemchild\", \"an_ses_quintile\")  t <- 0.05 sl.library.outcome <- c(\"SL.glm\", \"SL.ranger\", \"SL.earth\") sl.library.treatment <- c(\"SL.mean\") SL.missing.1 <- function(Y, X, newX, family, ...){   sl.missing.1_fit <- glm(Y ~ site + month_en,                           data = X,                           family = family)   # get predictions on newX   pred <- predict(     sl.missing.1_fit, newdata = newX, type = 'response'   )   # format the output as named list   fit <- list(fitted_model.missing.1 = sl.missing.1_fit)   out <- list(fit = fit, pred = pred)   # give the object a class   class(out$fit) <- \"SL.missing.1\"   # return the output   return(out) } predict.SL.missing.1 <- function(object, newdata, ...){   pred <- predict(object$fitted_model.missing.1, newdata = newdata, type=\"response\")   return(pred) } sl.library.missingness <- c(\"SL.mean\", \"SL.missing.1\") sl.library.CATE <- c(\"SL.glm\", \"SL.ranger\", \"SL.earth\")"},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"estimate-otr","dir":"Articles","previous_headings":"Usage:","what":"Estimate OTR","title":"drotr","text":"run analysis, call estimate_OTR() parameters specified . addition, specify name id variable dataset (pid), number folds used outer cross-validation (k = 10), indicate outcome continuous (gaussian). (Note run-time chunk approximately 4 minutes using libraries specified ). Alternatively, may choose break two steps- (1) nuisance model estimation, (2) estimation effects. can helpful split time-consuming analyses use set nuisance models repeatedly. , start calling learn_nuisance function: return object class nuisance contains model fits (nuisance_models), outer validation fold assignments pseudo-outcomes (k_fold_assign_and_CATE), inner validation fold assignments (validRows). can passed estimate_OTR avoid unnecessary re-fitting models. obtained results, can print table console using print: can interpret results follows: E[Y(1)|d(Z)=1]E[Y(1) | d(Z) = 1]: expected length--age z-score day 90 trial children recommended treatment host OTR receive treatment -1.65 (95% CI: -1.70 -1.60). E[Y(0)|d(Z)=1]E[Y(0) | d(Z) = 1]: expected length--age z-score day 90 trial children recommended treatment host OTR receive treatment -1.72 (95% CI: -1.77 -1.66). E[d(Z)=1]E[d(Z) = 1]: percentage children recommended treatment host OTR 42.92% (95% CI: 41.73% 44.10%) E[Y(1)−Y(0)|d(Z)=1]E[Y(1) - Y(0) | d(Z) = 1] / ATRTdATRT_d: average treatment effect among recommended treatment host OTR 0.07 (95% CI: 0.03 0.11). Children recommended treatment rule receive length--age z-score 0.07 higher received treatment. E[Y(1)−Y(0)|d(Z)=0]E[Y(1) - Y(0) | d(Z) = 0] / ATNRTdATNRT_d: average treatment effect among recommended treatment host OTR 0.02 (95% CI: -0.02 0.05). Children recommended treatment rule yet still receive length--age z-score 0.02 higher z-score without receiving treatment. E[Y(d)−Y(0)]E[Y(d) - Y(0)] / ATRdATR_d: overall average treatment effect rule 0.03 (95% CI: 0.01 0.05). population level, implementation treatment rule improves length--age z-scores day 90 trial 0.03. E[Y(1)−Y(0)|d(Z)=1]−E[Y(1)−Y(0)|d(Z)=0]E[Y(1) - Y(0) | d(Z) = 1] - E[Y(1) - Y(0) | d(Z) = 0] : difference treatment effect treated untreated subgroups 0.05 (95% CI: 0.00 0.11) One may wish examine output final full_otr_results object. full_otr_results contains following elements: results (class otr_results) component contains results various thresholds, represented separate Results object. aggregated_results: Summary results across k CATE models k_fold_results: Results influence functions k-folds decision_df: Data frame containing CATE prediction decision observation k_non_na: Folds result proportion treated = 1 0 (leading NA effect estimates) structure threshold = t1 additional threshold(s) specified Additional thresholds can added manner. nuisance_models list nuisance models used analysis. outcome_model: Model outcome. treatment_model: Model treatment. missingness_model: Model missing data. Structure similar fold 1. K nuisance models CATE_models list CATE models generated analysis. fold 1: CATE model results fold 1. fold 2: CATE model results fold 2. ...: k CATE models Z_list List covariates used CATE model Note- results objects may become large depending libraries used model fitting. One opt save otr_results object rather full_otr_results conserve memory maintain output printing functionality.","code":"set.seed(12345)  results_host <- estimate_OTR(df = abcd_data,                              Y_name = Y,                               A_name = A,                               W_list = W,                               Z_list = Z,                               id_name = \"pid\",                              sl.library.outcome = sl.library.outcome,                              sl.library.treatment = sl.library.treatment,                              sl.library.missingness = sl.library.missingness,                              sl.library.CATE = sl.library.CATE,                              threshold = t,                              k_folds = 10,                              outcome_type = \"gaussian\") nuisance_output <- learn_nuisance(df = abcd_data,                                   Y_name = Y,                                   A_name = A,                                    W_list = W,                                   sl.library.outcome = sl.library.outcome,                                   sl.library.treatment = sl.library.treatment,                                   sl.library.missingness = sl.library.missingness,                                   k_folds = 10,                                   outcome_type = \"gaussian\") #> Loading required package: nnls #> Loading required namespace: earth #> Loading required namespace: ranger nuisance_models <- nuisance_output$nuisance_models k_fold_assign_and_CATE <- nuisance_output$k_fold_assign_and_CATE validRows <- nuisance_output$validRows  results_host <- estimate_OTR(df = abcd_data,                              Y_name = Y,                               A_name = A,                               W_list = W,                               Z_list = Z,                               id_name = \"pid\",                              sl.library.CATE = sl.library.CATE,                              nuisance_models = nuisance_models,                              k_fold_assign_and_CATE = k_fold_assign_and_CATE,                              validRows = validRows,                              threshold = t,                              k_folds = 10,                              outcome_type = \"gaussian\") print(results_host) #>                                Results for  threshold =  0.05  Aggregated Across k =  10  folds  #> ---------------------------------------------------------------------------------------------------------------------------------------  #>                                                             Estimate            Standard Error      95% CI: Lower       95% CI: Upper        #> ---------------------------------------------------------------------------------------------------------------------------------------  #> E[Y(1) | d(Z) = 1]                                          -1.5367             0.0426              -1.6202             -1.4533              #> E[Y(0) | d(Z) = 1]                                          -1.5572             0.0431              -1.6417             -1.4728              #> E[d(Z) = 1]                                                 0.3753              0.0057              0.3642              0.3864               #> E[Y(1) - Y(0) | d(Z) = 1]                                   0.0205              0.0397              -0.0573             0.0983               #> E[Y(1) - Y(0) | d(Z) = 0]                                   0.052               0.0182              0.0164              0.0877               #> E[Y(d) - Y(0)]                                              0.0062              0.0086              -0.0107             0.0231               #> E[Y(1) - Y(0) | d(Z) = 1] - E[Y(1) - Y(0) | d(Z) = 0]       -0.0315             0.0437              -0.1172             0.0541               #>  #> Covariates used in decision rule:  avemuac, wfazscore, wflzscore, lfazscore, dy1_ant_sex, agemchild, an_ses_quintile"},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"compare-otrs","dir":"Articles","previous_headings":"Usage:","what":"Compare OTRs","title":"drotr","text":"may interested comparing results making inference across different rules. Let’s consider another OTR based Shigella pathogen quantity. can compare average treatment effect among recommended treatment rule (ATRTdATRT_d, subgroup effect) across rules calling compare.otr_results function. difference ATRTdATRT_d host Shigella rules -0.17 (95% CI: -0.25 -0.09). subgroup treated using rule based Shigella average z-score 0.17 higher day 90 average z-score subgroup treated using rule based host characteristics. rule based Shigella may effective improving length--age z-score day 90 rule based host characteristics using threshold 0.05.","code":"Z <- c(\"shigella_new\", \"shigella_bin\")  results_shigella <- estimate_OTR(df = abcd_data,                              Y_name = Y,                               A_name = A,                               W_list = W,                               Z_list = Z,                               id_name = \"pid\",                              sl.library.outcome = sl.library.outcome,                              sl.library.treatment = sl.library.treatment,                              sl.library.missingness = sl.library.missingness,                              sl.library.CATE = sl.library.CATE,                              threshold = t,                              k_folds = 10,                              outcome_type = \"gaussian\")  print(results_shigella) #>                                Results for  threshold =  0.05  Aggregated Across k =  10  folds  #> ---------------------------------------------------------------------------------------------------------------------------------------  #>                                                             Estimate            Standard Error      95% CI: Lower       95% CI: Upper        #> ---------------------------------------------------------------------------------------------------------------------------------------  #> E[Y(1) | d(Z) = 1]                                          -1.5163             0.0397              -1.594              -1.4386              #> E[Y(0) | d(Z) = 1]                                          -1.7533             0.0388              -1.8292             -1.6773              #> E[d(Z) = 1]                                                 0.1905              0.0048              0.1811              0.1999               #> E[Y(1) - Y(0) | d(Z) = 1]                                   0.237               0.0328              0.1727              0.3013               #> E[Y(1) - Y(0) | d(Z) = 0]                                   -0.005              0.0156              -0.0357             0.0256               #> E[Y(d) - Y(0)]                                              0.0448              0.0066              0.032               0.0577               #> E[Y(1) - Y(0) | d(Z) = 1] - E[Y(1) - Y(0) | d(Z) = 0]       0.242               0.0363              0.1708              0.3132               #>  #> Covariates used in decision rule:  shigella_new, shigella_bin compare.otr_results(res_rule1 = results_host,                     res_rule2 = results_shigella,                     threshold = t,                      rule1_comp = \"se\",                     rule2_comp = \"se\") #>  #>  Subgroup Effect E[Y(d) - Y(0) | d(Z) = 1]  for rule 1 at threshold =  0.05  #>  vs  #>  Subgroup Effect E[Y(d) - Y(0) | d(Z) = 1]  for rule 2 at threshold =  0.05  #> ---------------------------------------------------------------------------------------------------------  #>                               Estimate            Standard Error      95% CI: Lower       95% CI: Upper        #> ---------------------------------------------------------------------------------------------------------  #> Rule 1 - Rule 2               -0.2165             0.0514              -0.3172             -0.1158              #>  #>  Rule 1: Z =  avemuac, wfazscore, wflzscore, lfazscore, dy1_ant_sex, agemchild, an_ses_quintile #>  Rule 2: Z =  shigella_new, shigella_bin"},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"average-results-across-seeds","dir":"Articles","previous_headings":"","what":"Average results across seeds","title":"drotr","text":"One may interested running multiple simulations set rule averaging results account random variability model fitting. average_across_seeds function may used average results.","code":"results_list <- vector(mode = \"list\", length = 3)  for(seed in 1:3){      set.seed(seed)      results_shigella <- estimate_OTR(df = abcd_data,                                    Y_name = Y,                                     A_name = A,                                     W_list = W,                                     Z_list = Z,                                     id_name = \"pid\",                                    sl.library.outcome = sl.library.outcome,                                    sl.library.treatment = sl.library.treatment,                                    sl.library.missingness = sl.library.missingness,                                    sl.library.CATE = sl.library.CATE,                                    threshold = t,                                    k_folds = 10,                                    outcome_type = \"gaussian\")      results_list[[seed]] <- results_shigella    }  average_across_seeds(results_list = results_list, threshold = t) #>                                         Average results across n =  3  seeds for threshold  0.05  #> ---------------------------------------------------------------------------------------------------------------------------------------  #>                                                             Estimate            Standard Error      95% CI: Lower       95% CI: Upper        #> ---------------------------------------------------------------------------------------------------------------------------------------  #> E[Y(1) | d(Z) = 1]                                          -1.515              0.0397              -1.5929             -1.4372              #> E[Y(0) | d(Z) = 1]                                          -1.7506             0.039               -1.8271             -1.6742              #> E[d(Z) = 1]                                                 0.1908              0.0048              0.1814              0.2002               #> E[Y(1) - Y(0) | d(Z) = 1]                                   0.2356              0.0328              0.1713              0.2999               #> E[Y(1) - Y(0) | d(Z) = 0]                                   -0.0062             0.0156              -0.0369             0.0244               #> E[Y(d) - Y(0)]                                              0.0451              0.0066              0.0323              0.058                #> E[Y(1) - Y(0) | d(Z) = 1] - E[Y(1) - Y(0) | d(Z) = 0]       0.2418              0.0363              0.1706              0.313                #>  #> Covariates used in decision rule:  shigella_new, shigella_bin"},{"path":"https://allicodi.github.io/drotr/articles/drotr.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"drotr","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] nnls_1.5    drotr_0.1.0 #>  #> loaded via a namespace (and not attached): #>  [1] cli_3.6.3           knitr_1.48          rlang_1.1.4         #>  [4] xfun_0.48           Formula_1.2-5       textshaping_0.4.0   #>  [7] SuperLearner_2.0-29 jsonlite_1.8.9      ranger_0.16.0       #> [10] htmltools_0.5.8.1   ragg_1.3.3          sass_0.4.9          #> [13] rmarkdown_2.28      grid_4.4.1          evaluate_1.0.1      #> [16] jquerylib_0.1.4     earth_5.3.4         fastmap_1.2.0       #> [19] yaml_2.3.10         foreach_1.5.2       lifecycle_1.0.4     #> [22] compiler_4.4.1      codetools_0.2-20    fs_1.6.4            #> [25] Rcpp_1.0.13         lattice_0.22-6      systemfonts_1.1.0   #> [28] digest_0.6.37       R6_2.5.1            splines_4.4.1       #> [31] gam_1.22-5          Matrix_1.7-0        bslib_0.8.0         #> [34] plotmo_3.6.4        tools_4.4.1         plotrix_3.8-4       #> [37] iterators_1.0.14    pkgdown_2.1.1       cachem_1.1.0        #> [40] desc_1.4.3"},{"path":"https://allicodi.github.io/drotr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Allison Codi. Maintainer.","code":""},{"path":"https://allicodi.github.io/drotr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Codi (2024). drotr: Doubly-robust methods Optimal Treatment Rules. R package version 0.1.0, https://allicodi.github.io/drotr/, https://github.com/allicodi/drotr.","code":"@Manual{,   title = {drotr: Doubly-robust methods for Optimal Treatment Rules},   author = {Allison Codi},   year = {2024},   note = {R package version 0.1.0, https://allicodi.github.io/drotr/},   url = {https://github.com/allicodi/drotr}, }"},{"path":"https://allicodi.github.io/drotr/index.html","id":"rdrotr","dir":"","previous_headings":"","what":"Doubly-robust methods for Optimal Treatment Rules","title":"Doubly-robust methods for Optimal Treatment Rules","text":"Doubly robust optimal treatment rule estimation Author: Allison Codi","code":""},{"path":"https://allicodi.github.io/drotr/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Doubly-robust methods for Optimal Treatment Rules","text":"drotr package uses doubly-robust methods estimate optimal treatment rules (OTRs). define OTRs use conditional average treatment effects (CATEs). CATE can interpreted expected difference outcome treatment vs placebo. doubly-robust learner used estimate CATE. individuals CATE estimates exceed specified threshold ‘t’ treated OTR. observations assigned treatment OTR, can use various estimands describe rule: (1) proportion treated, (2) overall Average Treatment effect Rule (ATRdATR_d), (3) Average Treatment effect subgroup Recommended Treatment rule (ATRTdATRT_d), (4) Average Treatment effect subgroup Recommended Treatment rule (ATNRTdATNRT_d), (5) difference treatment recommendation subgroups (ATRTd−ATNRTdATRT_d - ATNRT_d). estimated using Augmented Inverse Probability Treatment Weight (AIPTW) estimators. full procedure implemented using nested cross-validation Super Learning.","code":""},{"path":"https://allicodi.github.io/drotr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation:","title":"Doubly-robust methods for Optimal Treatment Rules","text":"developmental release may installed GitHub via devtools : devtools::install_github(\"allicodi/drotr\")","code":""},{"path":"https://allicodi.github.io/drotr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage:","title":"Doubly-robust methods for Optimal Treatment Rules","text":"demonstrate calls drotr using simulated data set length--age z-score 90 days post enrollment diarrheal antibiotics trial. Additional information regarding rule interpretation, comparison, averaging across seeds can found vignettes/drotr","code":"library(drotr)  # 1. Load data data(abcd_data)  # 2. Set input parameters  # outcome variable Y <- \"lazd90\"  # treatment variable A <- \"an_grp_01\"  # covariates  W <- c(\"rotavirus_new\", \"rotavirus_bin\", \"norovirus_new\", \"norovirus_bin\", \"adenovirus_new\",       \"adenovirus_bin\", \"sapovirus_new\",\"sapovirus_bin\", \"astrovirus_new\", \"astrovirus_bin\",       \"st_etec_new\", \"st_etec_bin\", \"shigella_new\", \"shigella_bin\", \"campylobacter_new\",       \"campylobacter_bin\", \"tepec_new\", \"tepec_bin\", \"v_cholerae_new\", \"v_cholerae_bin\",       \"salmonella_new\", \"salmonella_bin\", \"cryptosporidium_new\", \"cryptosporidium_bin\",       \"dy1_scrn_vomitall\", \"dy1_scrn_lstools\", \"dy1_scrn_sstools\", \"dy1_scrn_diardays\",       \"dy1_scrn_dehydr\", \"avemuac\", \"wfazscore\", \"lfazscore\", \"wflzscore\", \"site\",       \"dy1_ant_sex\", \"agemchild\", \"an_ses_quintile\", \"an_tothhlt5\", \"month_en\", \"rotaseason\")  # subset of covariates to use to make rule Z <- c(\"avemuac\", \"wfazscore\", \"wflzscore\", \"lfazscore\", \"dy1_ant_sex\", \"agemchild\", \"an_ses_quintile\")  # treatment threshold t <- 0.05  # List of libraries to use for nuisance and CATE models sl.library.outcome <- c(\"SL.glm\", \"SL.ranger\", \"SL.earth\") sl.library.treatment <- c(\"SL.mean\", \"SL.glm\") sl.library.missingness <- c(\"SL.mean\", \"SL.glm\") sl.library.CATE <- c(\"SL.glm\", \"SL.ranger\", \"SL.earth\")  set.seed(12345)  results_host <- estimate_OTR(df = abcd_data,                              Y_name = Y,                               A_name = A,                               W_list = W,                               Z_list = Z,                               id_name = \"pid\",                              sl.library.outcome = sl.library.outcome,                              sl.library.treatment = sl.library.treatment,                              sl.library.missingness = sl.library.missingness,                              sl.library.CATE = sl.library.CATE,                              threshold = t,                              k_folds = 10,                              outcome_type = \"gaussian\")                               print(results_host) Results for  threshold =  0.05  Aggregated Across k =  10  folds ---------------------------------------------------------------------------------------------------------------------------------------                                                             Estimate            Standard Error      95% CI: Lower       95% CI: Upper --------------------------------------------------------------------------------------------------------------------------------------- E[Y(1) | d(Z) = 1]                                          -1.6637             0.0265              -1.7156             -1.6117 E[Y(0) | d(Z) = 1]                                          -1.709              0.026               -1.7599             -1.6581 E[d(Z) = 1]                                                 0.4516              0.0061              0.4397              0.4635 E[Y(1) - Y(0) | d(Z) = 1]                                   0.0453              0.0209              0.0043              0.0863 E[Y(1) - Y(0) | d(Z) = 0]                                   0.0338              0.0193              -0.004              0.0715 E[Y(d) - Y(0)]                                              0.019               0.0095              5e-04               0.0375 E[Y(1) - Y(0) | d(Z) = 1] - E[Y(1) - Y(0) | d(Z) = 0]       0.0116              0.0285              -0.0442             0.0673  Covariates used in decision rule:  avemuac, wfazscore, wflzscore, lfazscore, dy1_ant_sex, agemchild, an_ses_quintile"},{"path":"https://allicodi.github.io/drotr/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Doubly-robust methods for Optimal Treatment Rules","text":"encounter bugs feature requests, please file issue.","code":""},{"path":"https://allicodi.github.io/drotr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Doubly-robust methods for Optimal Treatment Rules","text":"using drotr R package, please cite following:","code":"@Manual{drotr_package,   title = {drotr: Doubly-robust optimal treatment rule estimation},   author = {Allison Codi},   note = {R packag version 1.0.0} }"},{"path":"https://allicodi.github.io/drotr/reference/abcd_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated data from AntiBiotics for Children with severe Diarrhea (ABCD) trial — abcd_data","title":"Simulated data from AntiBiotics for Children with severe Diarrhea (ABCD) trial — abcd_data","text":"Simulated dataset based closely real data ABCD trial 40 covariates n = 6692 observations. outcome variable length--age z-score day 90 trial (laz90) treatment variable azithromycin (an_grp_01). Details distribution variable can found *cite paper?*","code":""},{"path":"https://allicodi.github.io/drotr/reference/abcd_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated data from AntiBiotics for Children with severe Diarrhea (ABCD) trial — abcd_data","text":"","code":"data(abcd_data)"},{"path":"https://allicodi.github.io/drotr/reference/abcd_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated data from AntiBiotics for Children with severe Diarrhea (ABCD) trial — abcd_data","text":"object class \"data.frame\" pid Participant identification number an_grp_01 Binary indicator azithromycin (antibiotic) treatment,  1=assigned azithromycin, 0=assigned placebo rotavirus_new Relative quantity rotavirus stool sample based  log-10 transformed qPCR cycle threshold values rotavirus_bin Binary indicator rotavirus presence stool sample  (1=rotavirus detected, 0=rotavirus detected) norovirus_new Relative quantity norovirus stool sample based   log-10 transformed qPCR cycle threshold values norovirus_bin Binary indicator norovirus presence stool sample   (1=norovirus detected, 0=norovirus detected) adenovirus_new Relative quantity adenovirus stool sample based  log-10 transformed qPCR cycle threshold values adenovirus_bin Binary indicator adenovirus presence stool sample   (1=adenovirus detected, 0=adenovirus detected) astrovirus_new Relative quantity astrovirus stool sample based  log-10 transformed qPCR cycle threshold values astrovirus_bin Binary indicator astrovirus presence stool sample   (1=astrovirus detected, 0=astrovirus detected) sapovirus_new Relative quantity sapovirus stool sample based  log-10 transformed qPCR cycle threshold values sapovirus_bin Binary indicator sapovirus presence stool sample   (1=sapovirus detected, 0=sapovirus detected) st_etec_new Relative quantity st_etec stool sample based  log-10 transformed qPCR cycle threshold values st_etec_bin Binary indicator st_etec presence stool sample  (1=st_etec detected, 0=st_etec detected) shigella_new Relative quantity shigella stool sample based  log-10 transformed qPCR cycle threshold values shigella_bin Binary indicator shigella presence stool sample  (1=shigella detected, 0=shigella detected) campylobacter_new Relative quantity campylobacter stool sample  based log-10 transformed qPCR cycle threshold values campylobacter_bin Binary indicator campylobacter presence stool  sample (1=campylobacter detected, 0=campylobacter detected) tepec_new Relative quantity tepec stool sample based log-10   transformed qPCR cycle threshold values tepec_bin Binary indicator tepec presence stool sample  (1=tepec detected, 0=tepec detected) v_cholerae_new Relative quantity v_cholerae stool sample based  log-10 transformed qPCR cycle threshold values v_cholerae_bin Binary indicator v_cholerae presence stool sample   (1=v_cholerae detected, 0=v_cholerae detected) salmonella_new Relative quantity salmonella stool sample based  log-10 transformed qPCR cycle threshold values salmonella_bin Binary indicator salmonella presence stool sample  (1=salmonella detected, 0=salmonella detected) cryptosporidium_new Relative quantity cryptosporidium stool sample   based log-10 transformed qPCR cycle threshold values cryptosporidium_bin Binary indicator cryptosporidium presence  stool sample (1=cryptosporidium detected, 0=cryptosporidium detected) dy1_scrn_vomitall Factor two levels vomiting screening  (\"\" = vomit, \"Yes\" = vomit) dy1_scrn_lstools Number loose stools 24 hours prior enrollment   (continuous) dy1_scrn_sstools Number solid stools 24 hours prior enrollment  (continuous) dy1_scrn_diardays Duration (days) diarrhea illness prior enrollment   (continuous) dy1_scrn_dehydr Dehydration status screening  (ordinal, 1 = \"dehydration\", 2 = \"dehydration\", 3 = \"Severe dehydration\") avemuac Middle upper arm circumference (continuous) wfazscore Weight age z-score (continuous) lfazscore Length age z-score (continuous) wflzscore Weight length z-score (continuous) site Study site (nominal, 2 = Bangladesh, 3 = Kenya, 4 = Malawi,   5 = Mali, 6 = India, 7 = Tanzania, 8 = Pakistan) dy1_ant_sex Sex (1 = Male, 2 = Female) agemchild Age (months) (continuous) an_ses_quintile SES quintile (ordinal, 1 = 1st quintile,  2 = 2nd quintile, 3 = 3rd quintile, 4 = 4th quintile, 5 = 5th quintile) an_tothhlt5 Number children age 5 years household (continuous) rotaseason Binary indicator enrollment rotavirus season  (1 = enrolled rotavirus season, 0 = enrolled rotavirus season) month_en Month enrolled (1-12 correspond January-December) lazd90 Length age z-score day 90 post-enrollment","code":""},{"path":"https://allicodi.github.io/drotr/reference/abcd_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulated data from AntiBiotics for Children with severe Diarrhea (ABCD) trial — abcd_data","text":"coming soon","code":""},{"path":"https://allicodi.github.io/drotr/reference/abcd_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulated data from AntiBiotics for Children with severe Diarrhea (ABCD) trial — abcd_data","text":"","code":"data(abcd_data) head(abcd_data) #> # A tibble: 6 × 43 #>     pid an_grp_01 rotavirus_new norovirus_new adenovirus_new astrovirus_new #>   <dbl>     <dbl>         <dbl>         <dbl>          <dbl>          <dbl> #> 1     1         0             0          0              0                 0 #> 2     2         0             0          0              0                 0 #> 3     3         0             0          0              0                 0 #> 4     4         0             0          4.30           1.41              0 #> 5     5         1             0          0              0                 0 #> 6     6         1             0          0              4.61              0 #> # ℹ 37 more variables: sapovirus_new <dbl>, st_etec_new <dbl>, #> #   shigella_new <dbl>, campylobacter_new <dbl>, tepec_new <dbl>, #> #   v_cholerae_new <dbl>, salmonella_new <dbl>, cryptosporidium_new <dbl>, #> #   rotavirus_bin <dbl>, norovirus_bin <dbl>, adenovirus_bin <dbl>, #> #   astrovirus_bin <dbl>, sapovirus_bin <dbl>, st_etec_bin <dbl>, #> #   shigella_bin <dbl>, campylobacter_bin <dbl>, tepec_bin <dbl>, #> #   v_cholerae_bin <dbl>, salmonella_bin <dbl>, cryptosporidium_bin <dbl>, … hist(abcd_data$lazd90)"},{"path":"https://allicodi.github.io/drotr/reference/average_across_seeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to average results across multiple seeds — average_across_seeds","title":"Helper function to average results across multiple seeds — average_across_seeds","text":"Helper function average results across multiple seeds","code":""},{"path":"https://allicodi.github.io/drotr/reference/average_across_seeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to average results across multiple seeds — average_across_seeds","text":"","code":"average_across_seeds(results_list, threshold)"},{"path":"https://allicodi.github.io/drotr/reference/average_across_seeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to average results across multiple seeds — average_across_seeds","text":"results_list list results using models & Z_list, different seeds threshold threshold results use comparison","code":""},{"path":"https://allicodi.github.io/drotr/reference/average_across_seeds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to average results across multiple seeds — average_across_seeds","text":"summary_df dataframe summarizing results across length(results_list) seeds","code":""},{"path":"https://allicodi.github.io/drotr/reference/calc_aiptw.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate AIPTW — calc_aiptw","title":"Function to calculate AIPTW — calc_aiptw","text":"Function calculate AIPTW","code":""},{"path":"https://allicodi.github.io/drotr/reference/calc_aiptw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate AIPTW — calc_aiptw","text":"","code":"calc_aiptw(   a,   A,   A_name,   W,   Y,   I_Y,   d_pred,   mean_dZ,   outcome_model,   treatment_model,   missingness_model,   ps_trunc_level,   idx_sub )"},{"path":"https://allicodi.github.io/drotr/reference/calc_aiptw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate AIPTW — calc_aiptw","text":"value treatment set observations vector observed treatments A_name name treatment variable W dataframe covariates Y vector observed outcome variable I_Y indicator Y missing (I_Y = 1 missing, I_Y = 0 observed) d_pred vector treatment decisions (d_pred = 1 recommend treatment rule) mean_dZ proportion recommended treatment rule outcome_model outcome Nuisance model treatment_model treatment Nuisance model missingness_model missingness Nuisance model ps_trunc_level threshold truncate propensity score idx_sub indices observations recommended treatment (d_pred == 1)","code":""},{"path":[]},{"path":"https://allicodi.github.io/drotr/reference/compare.otr_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare outcomes under different treatment rules — compare.otr_results","title":"Compare outcomes under different treatment rules — compare.otr_results","text":"Compare outcomes different treatment rules","code":""},{"path":"https://allicodi.github.io/drotr/reference/compare.otr_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare outcomes under different treatment rules — compare.otr_results","text":"","code":"compare.otr_results(   res_rule1,   res_rule2,   threshold,   rule1_comp,   rule2_comp,   ... )"},{"path":"https://allicodi.github.io/drotr/reference/compare.otr_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare outcomes under different treatment rules — compare.otr_results","text":"res_rule1 \"otr_results\" object \"full_otr_results\" object treatment rule 1 res_rule2 \"otr_results\" object \"full_otr_results\" object treatment rule 2 threshold threshold use comparison rules (must appear otr_results objects) rule1_comp Effect type rule 1 use comparison (\"treatment effect\"/\"te\" \"subgroup effect\"/\"se\") rule2_comp Effect type rule 2 use comparison (\"treatment effect\"/\"te\" \"subgroup effect\"/\"se\") ... arguments (used)","code":""},{"path":"https://allicodi.github.io/drotr/reference/compare.otr_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare outcomes under different treatment rules — compare.otr_results","text":"dataframe containing expected value variance comparison","code":""},{"path":"https://allicodi.github.io/drotr/reference/compute_estimate_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Make treatment decisions and compute estimated outcomes/treatment effects in kth fold — compute_estimate_k","title":"Make treatment decisions and compute estimated outcomes/treatment effects in kth fold — compute_estimate_k","text":"Make treatment decisions compute estimated outcomes/treatment effects kth fold","code":""},{"path":"https://allicodi.github.io/drotr/reference/compute_estimate_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make treatment decisions and compute estimated outcomes/treatment effects in kth fold — compute_estimate_k","text":"","code":"compute_estimate_k(   df,   Y_name,   A_name,   W_list,   Z_list,   CATE_model,   nuisance,   sign,   threshold,   ps_trunc_level = 0.01,   truncate_CATE )"},{"path":"https://allicodi.github.io/drotr/reference/compute_estimate_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make treatment decisions and compute estimated outcomes/treatment effects in kth fold — compute_estimate_k","text":"df dataframe containing testing dataset Y_name name outcome variable df A_name name treatment variable df W_list character vector containing names covariates dataframe used nuisance models Z_list character vector containing names variables df used fit CATE model (variables used treatment rule) CATE_model discrete SuperLearner model CATE nuisance object class `Nuisance` containing outcome, treatment, missingness SuperLearner models sign sign threshold, + indicates `Y` desirable outcome, - indicates `Y` undesirable outcome threshold character vector decision thresholds CATE determine OTR. Values positive `Y_name` desirable outcome, negative `Y_name` undesirable outcome. threshold 0, use +0 desirable, -0 undesirable. ps_trunc_level numeric level use truncation predicted values fall truncate_CATE logical indicate large CATE predictions truncated -1 1 (default = TRUE)","code":""},{"path":[]},{"path":"https://allicodi.github.io/drotr/reference/compute_estimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Make treatment decisions and compute estimated outcomes/treatment effects — compute_estimates","title":"Make treatment decisions and compute estimated outcomes/treatment effects — compute_estimates","text":"Make treatment decisions compute estimated outcomes/treatment effects","code":""},{"path":"https://allicodi.github.io/drotr/reference/compute_estimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make treatment decisions and compute estimated outcomes/treatment effects — compute_estimates","text":"","code":"compute_estimates(   df,   Y_name,   A_name,   W_list,   Z_list,   k_fold_assign_and_CATE,   nuisance_models,   CATE_models,   threshold,   ps_trunc_level = 0.01,   truncate_CATE )"},{"path":"https://allicodi.github.io/drotr/reference/compute_estimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make treatment decisions and compute estimated outcomes/treatment effects — compute_estimates","text":"df dataframe containing dataset Y_name name outcome variable df A_name name treatment variable df W_list character vector containing names covariates dataframe used nuisance models Z_list character vector containing names variables df used fit CATE model (variables used treatment rule) k_fold_assign_and_CATE dataframe containing ids, fold assignments, CATE estimate observation df nuisance_models list objects class `Nuisance` containing outcome, treatment, missingness SuperLearner models CATE_models list discrete SuperLearner models CATE fold threshold character vector decision thresholds CATE determine OTR. Values positive `Y_name` desirable outcome, negative `Y_name` undesirable outcome. threshold 0, use +0 desirable, -0 undesirable. ps_trunc_level numeric level use truncation predicted values fall truncate_CATE logical indicate large CATE predictions truncated -1 1 (default = TRUE)","code":""},{"path":"https://allicodi.github.io/drotr/reference/compute_estimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make treatment decisions and compute estimated outcomes/treatment effects — compute_estimates","text":"aggregated_results dataframe overall results aggregated across `k` folds given threshold k_fold_results list results fold given threshold decision_df original dataset decision made observation given threshold k_non_na folds proportion treated = 1 = 0 (causing effect estimates NA)","code":""},{"path":"https://allicodi.github.io/drotr/reference/estimate_OTR.html","id":null,"dir":"Reference","previous_headings":"","what":"Main function to calculate estimated treatment effects for treatment rule — estimate_OTR","title":"Main function to calculate estimated treatment effects for treatment rule — estimate_OTR","text":"Primary function estimate treatment effects given treatment rule. Can fit nuisance models internally provided pre-fit nuisance models given dataset.","code":""},{"path":"https://allicodi.github.io/drotr/reference/estimate_OTR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Main function to calculate estimated treatment effects for treatment rule — estimate_OTR","text":"","code":"estimate_OTR(   df,   Y_name,   A_name,   W_list,   Z_list,   id_name = NULL,   sl.library.CATE,   nuisance_models = NULL,   k_fold_assign_and_CATE = NULL,   validRows = NULL,   sl.library.outcome = NULL,   sl.library.treatment = NULL,   sl.library.missingness = NULL,   threshold = c(\"0.05\"),   k_folds = 2,   ps_trunc_level = 0.01,   outcome_type = \"gaussian\",   truncate_CATE = \"TRUE\" )"},{"path":"https://allicodi.github.io/drotr/reference/estimate_OTR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Main function to calculate estimated treatment effects for treatment rule — estimate_OTR","text":"df dataframe containing full dataset Y_name name outcome variable df A_name name treatment variable df W_list character vector containing names covariates dataframe used fitting nuisance models Z_list character vector containing names variables df used fit CATE model (variables used treatment rule) id_name name participant ID variable sl.library.CATE character vector SuperLearner libraries use fit CATE model nuisance_models list objects class `Nuisance` containing outcome, treatment, missingness SuperLearner models (include using pre-fit nuisance models) k_fold_assign_and_CATE dataframe containing ids, fold assignments, CATE estimate observation df (include using pre-fit nuisance models) validRows list containing validRows assignents nuisance models using observations (include using pre-fit nuisance models) sl.library.outcome character vector SuperLearner libraries use fit outcome models sl.library.treatment character vector SuperLearner libraries use fit treatment models sl.library.missingness character vector SuperLearner libraries use fit missingness models threshold character vector decision thresholds CATE determine OTR. Values positive `Y_name` desirable outcome, negative `Y_name` undesirable outcome. threshold 0, use +0 desirable, -0 undesirable. k_folds integer number folds use cross-validation (must specify fitting outcome, treatment, missingness models. Otherwise uses k `k_fold_assign_and_CATE`) ps_trunc_level numeric evel propensity scores truncated (avoid errors computing AIPTW) outcome_type outcome_type specifying continuous (outcome_type = \"gaussian\") binary (outcome_type = \"binomial\") outcome Y (providing pre-fit nuisance models) truncate_CATE logical indicate large CATE predictions truncated -1 1 (default = TRUE)","code":""},{"path":"https://allicodi.github.io/drotr/reference/estimate_OTR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Main function to calculate estimated treatment effects for treatment rule — estimate_OTR","text":"results list `Results` objects threshold. See description `Results` object `compute_estimates` nuisance_models list `Nuisance` objects containing outcome, treatment, missingness models used fold CATE_models CATE model used fold Z_list character vector containing names variables df used fit CATE model (variables used treatment rule)","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_CATE.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to learn model for CATE using k-fold cross validation — learn_CATE","title":"Function to learn model for CATE using k-fold cross validation — learn_CATE","text":"Function learn model CATE using k-fold cross validation","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_CATE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to learn model for CATE using k-fold cross validation — learn_CATE","text":"","code":"learn_CATE(df, Z_list, k_fold_assign_and_CATE, sl.library.CATE, validRows)"},{"path":"https://allicodi.github.io/drotr/reference/learn_CATE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to learn model for CATE using k-fold cross validation — learn_CATE","text":"df dataframe containing full dataset Z_list character vector containing names variables df use fit CATE model (variables used treatment rule) k_fold_assign_and_CATE dataframe containing ids, fold assignments, CATE estimate observation df sl.library.CATE character vector SuperLearner libraries use fit CATE model validRows validRows SuperLearner row assignments nuisance models using rows data (missingness, treatment models)","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_CATE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to learn model for CATE using k-fold cross validation — learn_CATE","text":"list containing SuperLearner model CATE fold","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_CATE_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to learn model for CATE in kth fold — learn_CATE_k","title":"Function to learn model for CATE in kth fold — learn_CATE_k","text":"Function learn model CATE kth fold","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_CATE_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to learn model for CATE in kth fold — learn_CATE_k","text":"","code":"learn_CATE_k(df, Z_list, sl.library.CATE, validRows)"},{"path":"https://allicodi.github.io/drotr/reference/learn_CATE_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to learn model for CATE in kth fold — learn_CATE_k","text":"df dataframe containing training dataset Z_list character vector containing names variables df use fit CATE model (variables used treatment rule) sl.library.CATE character vector SuperLearner libraries use fit CATE model validRows SuperLearner validRows row assigments kth fold","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_CATE_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to learn model for CATE in kth fold — learn_CATE_k","text":"SuperLearner model CATE","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_nuisance.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats using k-fold cross validation — learn_nuisance","title":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats using k-fold cross validation — learn_nuisance","text":"Estimate nuisance models (outcome, treatment, missingness) calculate CATE hats using k-fold cross validation","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_nuisance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats using k-fold cross validation — learn_nuisance","text":"","code":"learn_nuisance(   df,   Y_name,   A_name,   W_list,   id_name = NULL,   sl.library.outcome,   sl.library.treatment,   sl.library.missingness,   outcome_type,   k_folds = 2,   ps_trunc_level = 0.01 )"},{"path":"https://allicodi.github.io/drotr/reference/learn_nuisance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats using k-fold cross validation — learn_nuisance","text":"df dataframe containing full dataset Y_name name outcome variable df A_name name treatment variable df W_list character vector containing names covariates dataframe used fitting nuisance models id_name name patient id variable dataset applicable, default NULL use observation index sl.library.outcome character vector SuperLearner libraries use fit outcome models sl.library.treatment character vector SuperLearner libraries use fit treatment models sl.library.missingness character vector SuperLearner libraries use fit missingness models outcome_type specifying continuous (outcome_type = \"gaussian\") binary (outcome_type = \"binomial\") outcome Y k_folds number folds k_fold cross validation ps_trunc_level numeric level use truncation predicted values fall ","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_nuisance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats using k-fold cross validation — learn_nuisance","text":"k_fold_nuisance list `Nuisance` objects (fit nuisance models) k folds k_fold_assign_and_CATE dataframe CATE estimates, k-1 folds, pseudo-outcome, shuffle idx corresponding validRows observation validRows list innerCV SuperLearner row assignments training set fold_assignments dataframe containing fold assignments id","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_nuisance_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats for kth fold — learn_nuisance_k","title":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats for kth fold — learn_nuisance_k","text":"Note training dataset contains observations EXCEPT assigned kth fold","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_nuisance_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats for kth fold — learn_nuisance_k","text":"","code":"learn_nuisance_k(   df,   Y_name,   A_name,   W_list,   sl.library.outcome,   sl.library.treatment,   sl.library.missingness,   outcome_type,   ps_trunc_level = 0.01 )"},{"path":"https://allicodi.github.io/drotr/reference/learn_nuisance_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats for kth fold — learn_nuisance_k","text":"df dataframe containing training dataset Y_name name outcome variable df A_name name treatment variable df W_list character vector containing names covariates dataframe used fitting nuisance models sl.library.outcome character vector SuperLearner libraries use fit outcome model sl.library.treatment character vector SuperLearner libraries use fit treatment model sl.library.missingness character vector SuperLearner libraries use fit missingness model outcome_type specifying continuous (gaussian) binomial outcome Y ps_trunc_level numeric level use truncation predicted values fall ","code":""},{"path":"https://allicodi.github.io/drotr/reference/learn_nuisance_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate nuisance models (outcome, treatment, and missingness) and calculate CATE hats for kth fold — learn_nuisance_k","text":"k_fold_nuisance object class `Nuisance` containing outcome, treatment, missingness SuperLearner models pseudo_outcome numeric vector pseudo_outcome CATE estimates data df shuffle_idx numeric vector corresponding index sorted dataframe validRows SuperLearner row assignments kth training set (training set sorted NA outcomes first)","code":""},{"path":"https://allicodi.github.io/drotr/reference/predict.avgSuperLearner.html","id":null,"dir":"Reference","previous_headings":"","what":"Method to average predictions over multiple SuperLearners — predict.avgSuperLearner","title":"Method to average predictions over multiple SuperLearners — predict.avgSuperLearner","text":"Method average predictions multiple SuperLearners","code":""},{"path":"https://allicodi.github.io/drotr/reference/predict.avgSuperLearner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method to average predictions over multiple SuperLearners — predict.avgSuperLearner","text":"","code":"# S3 method for class 'avgSuperLearner' predict(x, newdata, ...)"},{"path":"https://allicodi.github.io/drotr/reference/predict.avgSuperLearner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method to average predictions over multiple SuperLearners — predict.avgSuperLearner","text":"x Object class avgSuperLearner newdata Prediction data.frame ... arguments (used)","code":""},{"path":"https://allicodi.github.io/drotr/reference/predict.avgSuperLearner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method to average predictions over multiple SuperLearners — predict.avgSuperLearner","text":"Vector predictions newdata","code":""},{"path":"https://allicodi.github.io/drotr/reference/print.average_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the output of a ","title":"Print the output of a ","text":"Print output \"average_results\" object.","code":""},{"path":"https://allicodi.github.io/drotr/reference/print.average_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the output of a ","text":"","code":"# S3 method for class 'average_results' print(x, ...)"},{"path":"https://allicodi.github.io/drotr/reference/print.average_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the output of a ","text":"x \"otr_results\" \"full_otr_results\" object. ... arguments (used)","code":""},{"path":"https://allicodi.github.io/drotr/reference/print.full_otr_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the output of a ","title":"Print the output of a ","text":"Print output \"full_otr_results\" object.","code":""},{"path":"https://allicodi.github.io/drotr/reference/print.full_otr_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the output of a ","text":"","code":"# S3 method for class 'full_otr_results' print(x, ...)"},{"path":"https://allicodi.github.io/drotr/reference/print.full_otr_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the output of a ","text":"x \"full_otr_results\" object. ... arguments (used)","code":""},{"path":"https://allicodi.github.io/drotr/reference/print.otr_comparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the results of otr_comparison — print.otr_comparison","title":"Print the results of otr_comparison — print.otr_comparison","text":"Print results otr_comparison","code":""},{"path":"https://allicodi.github.io/drotr/reference/print.otr_comparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the results of otr_comparison — print.otr_comparison","text":"","code":"# S3 method for class 'otr_comparison' print(x, ...)"},{"path":"https://allicodi.github.io/drotr/reference/print.otr_comparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the results of otr_comparison — print.otr_comparison","text":"x \"otr_comparison\" object ... arguments (used)","code":""},{"path":"https://allicodi.github.io/drotr/reference/print.otr_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the output of a ","title":"Print the output of a ","text":"Print output \"full_otr_results\" object.","code":""},{"path":"https://allicodi.github.io/drotr/reference/print.otr_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the output of a ","text":"","code":"# S3 method for class 'otr_results' print(x, ...)"},{"path":"https://allicodi.github.io/drotr/reference/print.otr_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the output of a ","text":"x \"otr_results\" object. ... arguments (used)","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_cate.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to apply strip_glm function to libraries in CATE model — strip_cate","title":"Helper function to apply strip_glm function to libraries in CATE model — strip_cate","text":"Helper function apply strip_glm function libraries CATE model","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_cate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to apply strip_glm function to libraries in CATE model — strip_cate","text":"","code":"strip_cate(cate_model)"},{"path":"https://allicodi.github.io/drotr/reference/strip_cate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to apply strip_glm function to libraries in CATE model — strip_cate","text":"cate_model CATE model fit SuperLearner","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_cate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to apply strip_glm function to libraries in CATE model — strip_cate","text":"cate_model reduced output size","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to remove unnecessary output from SuperLearner model to reduce output size — strip_glm","title":"Helper function to remove unnecessary output from SuperLearner model to reduce output size — strip_glm","text":"Reference: https://www.r-bloggers.com/2019/12/need--save-rs-lm--glm-models-trim--fat/","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to remove unnecessary output from SuperLearner model to reduce output size — strip_glm","text":"","code":"strip_glm(cm, earth = FALSE)"},{"path":"https://allicodi.github.io/drotr/reference/strip_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to remove unnecessary output from SuperLearner model to reduce output size — strip_glm","text":"cm SuperLearner GLM Earth model earth flag model SuperLearner Earth model, defaults GLM","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to remove unnecessary output from SuperLearner model to reduce output size — strip_glm","text":"model unnecessary features removed","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_nuisance.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to apply strip_glm function to libraries in Nuisance model — strip_nuisance","title":"Helper function to apply strip_glm function to libraries in Nuisance model — strip_nuisance","text":"Helper function apply strip_glm function libraries Nuisance model","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_nuisance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to apply strip_glm function to libraries in Nuisance model — strip_nuisance","text":"","code":"strip_nuisance(nuisance_model)"},{"path":"https://allicodi.github.io/drotr/reference/strip_nuisance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to apply strip_glm function to libraries in Nuisance model — strip_nuisance","text":"nuisance_model Nuisance model fit SuperLearner","code":""},{"path":"https://allicodi.github.io/drotr/reference/strip_nuisance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to apply strip_glm function to libraries in Nuisance model — strip_nuisance","text":"Nuisance model reduced output size","code":""},{"path":"https://allicodi.github.io/drotr/news/index.html","id":"drotr-010","dir":"Changelog","previous_headings":"","what":"drotr 0.1.0","title":"drotr 0.1.0","text":"Initial CRAN submission.","code":""}]
